function BatchSaving(app,drtaFile)

params=drtaFile.draq_p;
drta_p=drtaFile.p;
data.Electrode = drtaFile.final.Electorde;
data.ElectrodesSaved = app.drta_Save.p.VisableChannel;

if isfield(drtaFile.final,'Digital')
    data.Digital = drtaFile.final.Digital;
    data.DigitalSaved = app.drta_Save.p.VisableDigital;
end
if isfield(drtaFile.final,'Analog')
    data.Analog = drtaFile.final.Analog;
    data.AnalogSaved = app.drta_Save.p.VisableAnalog;
end
data.TrialsNo = size(drtaFile.final.Idx,1);

if drtaFile.draq_p.dgordra==2
    %dg
    save([drtaFile.p.fullName(1:end-2),'mat'],'data','params','drta_p');
else
    %dra or rhd
    save([drtaFile.p.fullName(1:end-3),'mat'],'data','params','drta_p');
end

if isfield(drtaFile,'drtachoices')
    textUpdate = spirntf('Saved .mat for %s', drtaFile.choicesFileName);
    ReadoutUpdate(app,textUpdate);
    textUpdate = spirntf(' ');
    ReadoutUpdate(app,textUpdate);
else
    switch drtaFile.p.which_c_program

        case (1)
            %dropcnsampler
            msgbox('Saved .mat (dropcnsampler)');
        case (2)
            %splussminus
            msgbox('Saved .mat (dropcspm)');
        case (3)
            %background
            msgbox('Saved .mat (background)');
        case (4)
            %spmult
            msgbox('Saved .mat (spmult)');
        case (5)
            %mspy
            msgbox('Saved .mat (mspy)');
        case (6)
            %osampler
            msgbox('Saved .mat (osampler)');
        case (7)
            %ospm2mult
            msgbox('Saved .mat (spm2mult)');
        case (8)
            %lighton one pulse
            msgbox('Saved .mat (lighton1)');
        case (9)
            %lighton five pulses
            msgbox('Saved .mat (lighton5)');
        case (10)
            %dropcspm_conc
            msgbox('Saved .mat (dropcspm_conc)');
        case (11)
            %dropcspm_conc
            msgbox('Saved .mat (Ming laser)');
        case (12)
            %dropcspm_conc
            msgbox('Saved .mat (Merouann laser)');
        case (14)
            %dropcspm_conc
            msgbox('Saved .mat (Working Memory)');
        case (15)
            %dropcspm_conc
            msgbox('Saved .mat (Continuous)');
        case (16)
            %Kira laser
            msgbox('Saved .mat (Kira laser)');
        case (17)
            %Kira laser
            msgbox('Saved .mat (Schoppa laser)');
    end
end

%If the jt_times exists change the drtaFile.draq_p and drtaFile.p
%This is done so that variables generated by wave_clus are not overwritten

%Do this only if jt_times does exist

if drtaFile.draq_p.dgordra==2
    %This is a dg file
    jt_times_file= fullfile(drtaFile.p.PathName,['jt_times_',drtaFile.p.FileName(1:end-2),'mat']);
else
    %dra or rhd
    jt_times_file=fullfile(drtaFile.p.PathName,['jt_times_',drtaFile.p.FileName(1:end-3),'mat']);
end

if isfield(drtaFile,'drtachoices')
    %Note that drtaBatch overwrites the jt_times file
    cluster_class_per_file=[];
    offset_for_chan=[];
    noSpikes=0;
    all_timestamp_per_file=[];
    draq_p=drtaFile.draq_p;
else
    %If drta is being run load jt_times_file
    try
        load(jt_times_file);
    catch
        cluster_class_per_file=[];
        offset_for_chan=[];
        noSpikes=0;
        all_timestamp_per_file=[];
        draq_p=drtaFile.draq_p;
    end
end

par.doBehavior=0;

if isfield(drta_p,'tetr_processed')
    drtaFile.p.tetr_processed=drta_p.tetr_processed;
end

drta_p=drtaFile.p;
draq_d=drtaFile.draq_d;
if isfield(draq_d,'data')
    draq_d=rmfield(draq_d,'data');
end

if exist('units_per_tet','var')
    if drtaFile.p.which_c_program==8
        save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d','units_per_tet');
    else

        if isfield(par,'doBehavior')
            if par.doBehavior==1
                save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d','lickbit','dtime','units_per_tet');
            else
                save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d','units_per_tet');
            end
        else
            save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d','units_per_tet');
        end

    end
else
    if drtaFile.p.which_c_program==8
        save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d');
    else

        if isfield(par,'doBehavior')
            if par.doBehavior==1
                save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d','lickbit','dtime');
            else
                save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d');
            end
        else
            save(jt_times_file, 'cluster_class_per_file', 'par', 'offset_for_chan','noSpikes', 'all_timestamp_per_file','drta_p', 'draq_p', 'draq_d');
        end

    end
end

if isfield(drtaFile,'drtachoices')
    textUpdate = spirntf('Saved jt_times file for %s', drtaFile.choicesFileName);
    ReadoutUpdate(app,textUpdate);
else
    msgbox('Saved jt_times file');
end